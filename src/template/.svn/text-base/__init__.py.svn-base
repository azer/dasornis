from dasornis.lib.argument_set import ArgumentSet
from dasornis.lib.exception_info import ExceptionInfo
from dasornis.lib import get_date
from dasornis.log import logging
from dasornis import config,exceptions
from imp import load_module

class Template(object):
  def __init__(self,filename=None,engine=config.TEMPLATE_ENGINE):
    self.filename = filename
    self.engine_name = engine
    self.args = [
      ('config',config),
      ('template',self)
    ]
    self.directories = config.TEMPLATE_DIRS

    try:
      engine_path = '%s/template/adapters/%s.py'%(config.DASORNIS_WORKING_DIR,self.engine_name)
      self.adapter_module = load_module(self.engine_name,open(engine_path),engine_path,( '.py', 'U', 1 ))
    except ImportError:
      raise exceptions.TemplateAdapterDoesntExist,'Define a supported template engine unlike "%s" in the configuration file.'%self.engine_name
    
    self.adapter = self.adapter_module.Adapter(self)

  def _filterFilename_(self,filename):
    return filename

  @apply
  def filename():
    def fget(self):
      return self._filename
    def fset(self,filename):
      self._filename = self._filterFilename_(filename)
    return property(**locals())

  def render(self):
    return self.adapter.render()

  '''
  def render(self):
    output = None
    try:
      output = self._render_()
    except:
      logging.error('Could not render template named "%s"'%self.filename)
      excinf = ExceptionInfo()
      excinf.log()
      self.http_handler.response.status = '500 Internal Server Error'

      if config.DEBUG:
        output = excinf.format_stack()
        raise exceptions.ViewErrorPage

    return output
  '''
